#!/usr/bin/env python

PACKAGE = "bachelors_final_project"

import math
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

##################################### Cropping #################################
cropping = gen.add_group("Cropping", "collapse")
cropping.add("scaleParam", double_t, 0,
        "The red one.",
        2.5, 0.0, 10.0)
cropping.add("xTranslateParam", double_t, 0,
        "The green one.",
        0.0, -128, 128)
cropping.add("yTranslateParam", double_t, 0,
        "The Blue one.",
        10, -196, 196)

################################# Passthrough #################################
passThrough = gen.add_group("PassThrough", "hide", False)
passThrough.add("xLimitParam", double_t, 0,
        "The red one.",
        0.405, 0.0, 4.5)
passThrough.add("yLimitParam", double_t, 0,
        "The green one.",
        0.18, 0.0, 4.5)
passThrough.add("zLimitParam", double_t, 0,
        "The Blue one.",
        1.575, 0.0, 4.5)

############################### Gaussian Smoothing ############################
gaussianSmoothing = gen.add_group("Gaussian Smoothing", "collapse")
gaussianSmoothing.add("gaussianSigmaParam", double_t, 0,
        "The Gaussian sigma.",
        2.0, 0.000001, 10000)
gaussianSmoothing.add("gaussianSearchRadiusParam", double_t, 0,
        "The Gaussian search radius.",
        0.005, 0.000001, 0.025)

############################ Compute normals efficiently ##############################
computeNormalsEfficiently = gen.add_group("Compute normals efficiently", "collapse")
size_enum = gen.enum([ gen.const("COVARIANCE_MATRIX",      int_t, 1, "A small constant"),
                     gen.const("AVERAGE_3D_GRADIENT",     int_t, 2, "A medium constant"),
                     gen.const("AVERAGE_DEPTH_CHANGE",      int_t, 3, "A large constant"),
                     gen.const("SIMPLE_3D_GRADIENT", int_t, 4, "An extra large constant")],
                     "Selector of the normals estimation method enum.")
computeNormalsEfficiently.add("normalEstimationMethodParam", int_t, 0,
        "Selector of the normals estimation method.",
        1, 1, 4, edit_method=size_enum)
computeNormalsEfficiently.add("maxDepthChangeFactorParam", double_t, 0,
        "The depth change threshold for computing object borders in integral normal estimation. ",
        0.01, 0, 1)
computeNormalsEfficiently.add("useDepthDependentSmoothingParam", bool_t, 0,
        "Set if using depth dependent smoothing",
        False)
computeNormalsEfficiently.add("normalSmoothingSizeParam", double_t, 0,
        "Factor which influences the size of the area used to smooth normals",
        15.0, 0)

################################# Fit Plane From Normals ################################
fitPlaneFromNormals = gen.add_group("Fit Plane From Normals", "collapse")
fitPlaneFromNormals.add("normalDistanceWeightParam", double_t, 0,
        "Set the relative weight (between 0 and 1) to give to the angular distance",
        0.5, 0, 1)

fitPlaneFromNormals.add("minAngleParam", double_t, 0,
        "Set the relative weight (between 0 and 1) to give to the angular distance",
        0.0, 0, 2*math.pi)
fitPlaneFromNormals.add("maxAngleParam", double_t, 0,
        "Set the relative weight (between 0 and 1) to give to the angular distance",
        2*math.pi, 0, 2*math.pi)
fitPlaneFromNormals.add("originDistanceParam", double_t, 0,
        "Set the relative weight (between 0 and 1) to give to the angular distance",
        150.0, 0, 10000)
fitPlaneFromNormals.add("maxIterationsParam", int_t, 0,
        "Set the relative weight (between 0 and 1) to give to the angular distance",
        500, 10, 5000)

fitPlaneFromNormals.add("distanceThresholdParam", double_t, 0,
        "Points within this distance from the hypothesized plane are scored as inliers",
        0.3, 0)

fitPlaneFromNormals.add("optimizeCoefficientsParam", bool_t, 0,
        "Points within this distance from the hypothesized plane are scored as inliers",
        True)
fitPlaneFromNormals.add("probabilityParam", double_t, 0,
        "Points within this distance from the hypothesized plane are scored as inliers",
        0.99, 0.0, 1.0)
fitPlaneFromNormals.add("sampleMaxDistanceParam", double_t, 0,
        "Points within this distance from the hypothesized plane are scored as inliers",
        200, 0, 10000)
fitPlaneFromNormals.add("useSpecificPlaneParam", bool_t, 0,
        "Points within this distance from the hypothesized plane are scored as inliers",
        False)
fitPlaneFromNormals.add("planeXParam", double_t, 0,
        "Points within this distance from the hypothesized plane are scored as inliers",
        0, 0, 1)
fitPlaneFromNormals.add("planeYParam", double_t, 0,
        "Points within this distance from the hypothesized plane are scored as inliers",
        1, 0, 1)
fitPlaneFromNormals.add("planeZParam", double_t, 0,
        "Points within this distance from the hypothesized plane are scored as inliers",
        0, 0, 1)
fitPlaneFromNormals.add("epsAngleParam", double_t, 0,
        "Points within this distance from the hypothesized plane are scored as inliers",
        2*math.pi, 0, 2*math.pi)

############################ Extract Cloud Over The Table ############################
cloudOverTable = gen.add_group("Cloud Over The Table", "collapse", False)
cloudOverTable.add("minHeightParam", double_t, 0,
        "Min prism height",
        0.0, 0.0, 1.0)
cloudOverTable.add("maxHeightParam", double_t, 0,
        "Max prism height",
        0.2, 0.0, 1.0)

########################################## Visualizer ################################
gen.add("vizNormalsCountParam", int_t, 0,
        "Show normals every vizNormalsCount levels.",
        50, 1,1000)
gen.add("normalsSizeParam", double_t, 0,
        "Changes normals size.",
        1.0, 0.01,50)

################################## Reset everything ##################################
gen.add("defaultParams", bool_t, 0,
        "Return values to default",
        False)        

exit(gen.generate(PACKAGE, PACKAGE, "Parameters"))
